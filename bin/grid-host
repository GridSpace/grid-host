#!/usr/bin/env node

/** Copyright 2014-2018 Stewart Allen <so@a3z.co> -- All Rights Reserved */

function log(o) {
    if (typeof(o) === 'object') {
        console.log(JSON.stringify(o));
    } else {
        console.log(o);
    }
}

function lastmod(path) {
    try {
        return fs.statSync(path).mtime.getTime();
    } catch (e) {
        return 0;
    }
}

function mkdirs(path) {
    var root = "";
    path.forEach(seg => {
        if (root) {
            root = root + "/" + seg;
        } else {
            root = seg;
        }
        lastmod(root) || fs.mkdirSync(root);
    });
}

function tempFileName() {
    return tempDir + "/" + (new Date().getTime().toString(36)) + "-" + (tempIndex++) + ".tmp";
}

function encode(obj) {
    return JSON.stringify(obj);
}

function decode(str) {
    return JSON.parse(str);
}

function encodeQueue() {
    const q = [];
    queue.forEach(el => {
        el = Object.assign({}, el);
        delete el.waiting;
        delete el.data;
        delete el.image;
        q.push(el);
    });
    return encode(q);
}

function saveQueue() {
    while (queue.length > 25) queue.shift();
    fs.writeFileSync(setup.queue, encodeQueue());
}

function setFixedHeaders(req,res) {
    res.setHeader("Access-Control-Allow-Origin", req.headers['origin'] || '*');
    res.setHeader("Access-Control-Allow-Credentials", true);
    res.setHeader("Access-Control-Allow-Headers", "X-Moto-Ajax");
}

function init(req, res, next) {
    var parsed = url.parse(req.url, true);
    req.gs = {
        path: parsed.pathname,
        query: parsed.query,
    };
    if (req.method === 'OPTIONS') {
        setFixedHeaders(req,res);
        res.setHeader("Allow", "GET,POST,OPTIONS");
        res.end();
    } else {
        next();
    }
}

function api(req, res, next) {
    var path = req.gs.path,
        query = req.gs.query,
        remoteIP = req.connection.remoteAddress,
        queueEntry;

    // pass unless url starts with /api/
    if (!path.startsWith(apiroot)) return next();

    // require key when set in config
    if (setup.key && query.key !== setup.key) {
        res.writeHead(401);
        res.end();
        return;
    }

    switch (path.substring(apiroot.length)) {

        // return list of print targets
        case "targets":
            setFixedHeaders(req,res);
            res.end(encode(setup.targets));
            break;

        // return list of last 25 prints
        case "queue":
            setFixedHeaders(req,res);
            res.end(encodeQueue());
            break;

        // return status of queued print from unique key
        case "check":
            queueEntry = queued[query.key];
            setFixedHeaders(req,res);
            res.end(encode(
                queueEntry ? {
                    key: queueEntry.key,
                    status: queueEntry.status,
                    error: queueEntry.error,
                    done: queueEntry.done
                } : {
                    error: "invalid key"
                }
            ));
            break;

        // call blocks until queue task completes (when it's running)
        case "wait":
            queueEntry = queued[query.key];
            setFixedHeaders(req,res);
            if (queueEntry) {
                log({wait_on: queueEntry.key});
                queueEntry.waiting.push(res);
            } else {
                res.end(encode({error:"invalid queue key"}));
            }
            break;

        // queue new print job and assign a unique queue key
        case "print":
            if (req.method !== 'POST') return next();
            if (!query.filename) return next();
            if (!query.target) return next();

            var body = '';
            var queueKey = new Date().getTime().toString(36);

            queued[queueKey] = queueEntry = {
                time: {                     // timestamps
                    add: Date.now()
                },
                key:    queueKey,           // unique uid for queue entry
                from:   remoteIP,           // client that submitted job
                data:   null,               // gcode
                done:   false,              // queue item completed
                error:  false,              // an error occurred
                status: "queueing",
                target: query.target,
                name:   query.filename || "gprint",
                estime: query.time || 0,    // estimated print time
                fused:  query.length || 0,  // filament used
                waiting: [],                // http clients waiting
                cleanup: []                 // tmp file names to cleanup
            };

            // create queue entry and save
            queue.push(queueEntry);
            saveQueue();

            req.on('data', data => {
                body += data
            });

            req.on('end', () => {
                try {
                    // if gcode is null terminated, extract the following
                    // image buffer in base64 encoded png format
                    body = body.split("\0");
                    var gcode = body[0];
                    var image = body[1] || null;

                    queueEntry.data = gcode;
                    queueEntry.status = "queued";
                    queueEntry.time.queued = Date.now();
                    saveQueue();

                    log({key:queueKey, size:body.length, file:queueEntry.filename, target:req.gs.query.target});
                    setFixedHeaders(req,res);
                    res.end(encode({key:queueKey}));

                    if (image) {
                        png2bmp(Buffer.from(image, "base64"), bmp => {
                            queueEntry.image = bmp;
                            processTaskFilters(queueEntry);
                        });
                    } else {
                        processTaskFilters(queueEntry);
                    }
                } catch (e) {
                    console.log(e);
                    log(e);
                    res.writeHead(500);
                    res.end(encode({error:e.toString()}));
                }
            });

            break;

        default:
            next();
    }

}

function processTaskFilters(queueEntry) {
    var target = setup.targets[queueEntry.target],
        filter = setup.filters[target.filter],
        proc, args;

    if (!target) throw "invalid target: " + queueEntry.target;
    if (!filter) throw "missing filter for " + queueEntry.target;

    target.key = queueEntry.target;
    queueEntry.target = target;
    queueEntry.tmpFile = tempFileName();

    if (Array.isArray(filter)) {
        queueEntry.filters = filter;
        processFilter(queueEntry, 0);
    } else {
        queueEntry.filters = [ filter ];
        processFilter(queueEntry, 0);
    }
}

function processFilter(queueEntry, index) {
    const filter = Object.assign({}, queueEntry.filters[index]);
    const target = queueEntry.target;

    if (filter.exec) {
        var img = '';
        var err = '';
        var out = '';
        var ext = filter.ext || '.gcode';
        var fname = filter.name || queueEntry.name;
        var file = queueEntry.tmpFile || tempFileName();

        // emit file with data and add to cleanup list
        fs.writeFileSync(file, queueEntry.data);
        queueEntry.cleanup.push(file);

        // storge image, if present, and add to cleanup list
        if (queueEntry.image) {
            img = tempFileName();
            fs.writeFileSync(img, queueEntry.image.data);
            queueEntry.cleanup.push(img);
        }

        // add missing file name extension
        if (fname.indexOf(ext) < 0) {
            fname = fname + ext;
         }

        fname = fname.replace("{seq}", printSequence++);
        fname = fname.replace("{name}", queueEntry.name);

        args = (filter.args || []).slice();
        args.forEach((val,idx) => {
            // replace any provided key/values from target
            for (var tkey in target) {
                val = val.replace("{" + tkey + "}", target[tkey]);
            }
            val = val.replace("{file}", file);
            val = val.replace("{print-time}", queueEntry.estime);
            val = val.replace("{filament-used}", queueEntry.fused);
            val = val.replace("{name}", fname);
            val = val.replace("{image}", img);
            args[idx] = val;
        });

        queueEntry.time.exec = Date.now();
        queueEntry.status = "exec " + filter.exec;

        proc = spawn(filter.exec, args)
            .on('error', error => {
                log(error);
                queueEntry.error = true;
                queueEntry.status = error.toString();
                queueEntry.time.error = Date.now();
                saveQueue();
                onFilterDone(queueEntry);
            })
            .on('exit', code => {
                if (queueEntry.error) {
                    log({exit_on_error: code});
                    return;
                }
                if (code) {
                    queueEntry.error = true;
                    queueEntry.status = err;
                    queueEntry.time.done = Date.now();
                    saveQueue();
                    onFilterDone(queueEntry);
                    return;
                }
                processFilter(queueEntry, index + 1);
            });

        new linebuf(proc.stdout);
        new linebuf(proc.stderr);

        proc.stdout.on('line', line => { log({out: line.toString()}) });
        proc.stderr.on('line', line => { log({err: line.toString()}) });

        // proc.stdout.on('data', data => log({
        //     out: out = data.toString()
        // }));

        // proc.stderr.on('data', error => log({
        //     err: err = error.toString()
        // }));

        return;
    }

    onFilterDone(queueEntry);
}

function onFilterDone(queueEntry) {
    if (!queueEntry.error) {
        queueEntry.status = "sent";
    }
    queueEntry.data = null;
    queueEntry.done = true;
    queueEntry.waiting.forEach(function(res) {
        res.end(encode({
            key: queueEntry.key,
            status: queueEntry.status,
            error: queueEntry.error,
            done: queueEntry.done
        }));
    });
    // expire completed entries and tmp files after 10 minutes
    setTimeout(function() {
        delete queued[queueEntry.key];
        queueEntry.cleanup.forEach(filename => {
            try { fs.unlinkSync(filename) } catch (e) { log(e) }
        });
        saveQueue();
    }, 600000);
}

/* *********************************************
 * Start it up
 ********************************************* */

var fs = require('fs'),
    url = require('url'),
    http = require('http'),
    https = require('https')
    serve = require('serve-static')
    connect = require('connect'),
    linebuf = require("buffer.lines"),
    spawn = require('child_process').spawn,
    png2bmp = require('../lib/image').png2bmp,
    WebSocket = require('ws'),
    printSequence = 0,
    tempIndex = 0,
    tempDir = null,
    queued = {},
    queue = [],
    cwd = process.cwd(),
    key = null,
    fn = null,
    setup = {
        // use command-line to override
        "config" : "etc/config.json",
        // persisted queue state
        "queue" : "etc/queue.json",
        // protect http(s) access with a shared secret key
        "key": null,
        // kiri:moto auto-detect only works with "default" at the moment
        "org": "default",
        // passed to kiri:moto auto-detect as grid:host url. use url format
        "autohost": false,
        "host": null,
        "http-port": 8111,
        "https-port": 8112,
        // provided cert/key bound to local.grid.space so can be
        // added to your local dns or /etc/hosts to point to your
        // grid:host server. allows kiri:moto inside Onshape to
        // access your grid:host server without clunky workarounds.
        "ssl-cert": "etc/ssl-local-cert.pem",
        "ssl-key": "etc/ssl-local-key.pem",
        // your config should provide these
        "targets" : { },
        // your config filters will be added to this list
        "filters" : {
            "x3g" : {
                "exec": "gpx",
                "args": [ "{file}", "{file}.x3g" ]
            },
            "gx": {
                "exec": "bin/gx-util",
                "args": [ "{host}", "{port}", "{file}", "{print-time}", "{filament-used}", "{name}", "{image}" ],
                "ext": ".gx"
            },
            "n2": {
                "exec": "bin/n2-util",
                "args": [ "{host}", "{file}", "{name}" ],
                "ext": ".gcode"
            },
            "scp": {
                "exec": "scp",
                "args": [ "{file}", "{user}@{host}:{dir}/{name}" ]
            }
        }
    };

/** process command-line arguments */
process.argv.slice(2).forEach(v => {
    if (!key) {
        let split = false;
        if (v.startsWith("--")) {
            v = v.substring(2).split("=");
            key = v[0];
            v = v[1];
            split = true;
        } else if (v.startsWith("-")) {
            key = v.substring(1);
        } else {
            throw "invalid format: " + v;
        }
        switch (key) {
            case 'port':
            case 'http-port':
            case 'https-port':
                fn = parseInt;
                break;
            case 'ssl-cert':
            case 'ssl-key':
            case 'config':
            case 'queue':
                break;
            default:
                throw "invalid option: " + key;
        }
        if (!split) return;
    }
    if (key) {
        setup[key] = fn ? fn(v) : v;
        key = null;
        fn = null;
    }
});

function mergeConfig(config) {
    for (let key in config) {
        switch (key) {
            case 'targets':
            case 'filters':
                Object.assign(setup[key], config[key]);
                break;
            default:
                setup[key] = config[key];
                break;
        }
    }
    return setup;
}

if (setup['config']) setup = mergeConfig(decode(fs.readFileSync(setup['config'])));
if (setup['ssl-key']) setup['ssl-key'] = fs.readFileSync(setup['ssl-key']);
if (setup['ssl-cert']) setup['ssl-cert'] = fs.readFileSync(setup['ssl-cert']);

/** temp dir for filtering */
tempDir = cwd + "/tmp";
mkdirs([ tempDir ]);

var apiroot = "/api/",
    report = ["grid:host"],
    wport = setup['http-port'] || setup['port'],
    sport = setup['https-port'],
    handler = connect()
        .use(init)
        .use(api)
        .use(serve(cwd + "/web/"))
    ;

if (wport) {
    var http_server = http.createServer(handler).listen(wport);
    report.push("http @ " + wport);
}

if (sport) {
    var https_server = https.createServer({
        key: setup['ssl-key'],
        cert: setup['ssl-cert']
    }, handler).listen(sport);
    report.push("https @ " + sport);
}

// start disconnected web socket server that can be shared
if (setup['wss']) {
    report.push("websockets");
    const wss = new WebSocket.Server({ noServer: true });
    const upgrade = (request, socket, head) => {
        const pathname = url.parse(request.url).pathname;
        if (pathname === "/ws") {
            wss.handleUpgrade(request, socket, head, (ws) => {
              wss.emit('connection', ws, request);
            });
        } else {
            socket.destroy();
        }
    };
    wss.on('connection', (ws) => {
      ws.on('message', (message) => { });
    });
    if (http_server) http_server.on("upgrade", upgrade);
    if (https_server) https_server.on("upgrade", upgrade);
}

// reload old queue state (TODO repair and delete dangling tmp files)
if (lastmod(setup.queue)) queue = decode(fs.readFileSync(setup.queue));

// output date
report.push(new Date().toString());

/** startup report */
log(report.join(" | "));

/**
 * store org <> host map for auto-grid-host in kiri
 * if host not specified, use ip:port of grid-host server
 */
if (setup.org && (setup.host || setup.autohost)) {
    let host = setup.host || null;
    let nif = require('os').networkInterfaces();

    for (let key in nif) {
        if (host) break;
        let nic = nif[key];
        nic.forEach(ni => {
            if (host) return;
            if (!ni.internal && ni.family === "IPv4") {
                if (setup['https-port']) {
                    host = "https://" + ni.address + ":" + setup['https-port'];
                } else {
                    host = "http://" + ni.address + ":" + setup['port'];
                }
            }
        });
    }

    let args = [
        "org=" + encodeURIComponent(setup.org),
        "host=" + encodeURIComponent(host)
    ].join('&');

    console.log({register: host || "*autohost*", org: setup.org});

    https.get("https://grid.space/api/host_up?" + args, (res) => {
        // console.log({sc: res.statusCode});
        res.on("data", (data) => {
            // console.log({data: data.toString()});
        })
    }).on("error", (error) => {
        // console.log(error);
    });
}
